name: Android Build

on:
  push:
    branches:
      - "mainn"
    #tags:
      #- 'v[0-9]+.[0-9]+.[0-9]+([0-9]+)'

jobs:
  android-build:
    name: Android Build
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version

    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v2

      - name: Set up our JDK environment # setup JDK environment: mandatory as we need to build  android project
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore node_modules from cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies # install project deps with --frozen-lockfile to make sure we will have the same packages version ( very recommended  on running yarn install on ci)
        run: yarn install --frozen-lockfile

      ## configure cash for gradle : will help to reduce build time
      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      - name: Generate App APK
        run: |
          cd android && ./gradlew assembleDebug --no-daemon
     
      - name: App Center
        uses: wzieba/AppCenter-Github-Action@v1.3.3
        with:
          # App name followed by username e.g. wzieba/Sample-App
          appName: PunitKashyup/RentTracker
          # Upload token - you can get one from appcenter.ms/settings
          token: 81e54aa0dd8abec10e43903f82947b25f402a027
          # Distribution group
          group: Collaborators
          # Artefact to upload (.apk or .ipa)
          file: android/app/build/outputs/apk/debug/app-debug.apk
          #buildVersion: # optional
          # Build number parameter required for macOS .pkg and .dmg files
          #buildNumber: # optional
          # Release notes visible on release page
          #releaseNotes: # optional
          # Generate release notes based on the latest git commit
          #gitReleaseNotes: # optional
          # If true, send an email notification to the distribution group
          notifyTesters: true
          # If true, shows additional information from the action execution
          #debug: # optional


